---
- name: Restore PostgreSQL Backup from Azure Blob Storage
  hosts: all
  become: yes
  vars:
    # PostgreSQL connection details
    pg_host: "cnpg-cluster-rw.cnpg-database.svc.cluster.local"
    pg_user: "gaian"
    pg_password: "GaianMobius"
    pg_admin_db: "postgres"  # The admin database to connect to

    # Backup configuration
    base_backup_dir: "/data/backup"  # Local directory to store backups temporarily
    backup_file_name: "railtel-pgsql-backup-2024-10-08-10-56.tar.gz"  # Specific backup file name to download

  tasks:
    - name: Ensure backup directory exists locally
      file:
        path: "{{ base_backup_dir }}"
        state: directory

    - name: Download the specific backup file from Azure Blob Storage
      shell: |
        azcopy copy "{{ az_blob_url }}/{{ backup_file_name }}?{{ az_blob_token }}" "{{ base_backup_dir }}/{{ backup_file_name }}"
      args:
        creates: "{{ base_backup_dir }}/{{ backup_file_name }}"

    - name: Extract the compressed backup directly into the base directory
      shell: |
        tar --strip-components=1 -xzvf "{{ base_backup_dir }}/{{ backup_file_name }}" -C "{{ base_backup_dir }}"
      register: extract_result
      changed_when: True

    - name: Find all SQL files in the extracted backup directory
      find:
        paths: "{{ base_backup_dir }}"
        patterns: "*.sql"
      register: sql_files

    - name: List all found SQL files
      debug:
        msg: "{{ sql_files.files | map(attribute='path') | list }}"

    - name: Check if databases exist and create if not
      block:
        - name: Check if database exists
          shell: |
            psql -h {{ pg_host }} -U {{ pg_user }} -d {{ pg_admin_db }} -tAc "SELECT 1 FROM pg_database WHERE datname='{{ item.path | basename | splitext | first }}'"
          register: db_exists
          environment:
            PGPASSWORD: "{{ pg_password }}"
          changed_when: false
          failed_when: false
          loop: "{{ sql_files.files }}"
          loop_control:
            loop_var: item

        - name: Debug database existence check output
          debug:
            var: db_exists.results

        - name: Create databases that do not exist
          shell: |
            psql -h {{ pg_host }} -U {{ pg_user }} -d {{ pg_admin_db }} -c "CREATE DATABASE \"{{ item.item.path | basename | splitext | first }}\""
          when: item.stdout.strip() == ""
          environment:
            PGPASSWORD: "{{ pg_password }}"
          loop: "{{ db_exists.results }}"
          loop_control:
            loop_var: item
        
    - name: Restore each database from SQL files
      shell: |
        psql -h {{ pg_host }} -U {{ pg_user }} -d "{{ item.path | basename | splitext | first }}" -f "{{ item.path }}"
      environment:
        PGPASSWORD: "{{ pg_password }}"
      loop: "{{ sql_files.files }}"
      loop_control:
        loop_var: item
      register: restore_result
      retries: 3  # Number of retry attempts
      delay: 5    # Delay in seconds between retries
      until: restore_result.rc == 0  # Retry until the restore is successful
      

    - name: Remove extracted backup files after restoration
      file:
        path: "{{ base_backup_dir }}"
        state: absent
      ignore_errors: yes
