---
- name: Backup TiDB databases and upload to Azure Blob Storage
  hosts: all
  become: yes
  vars:
    # TiDB connection details
    tidb_host: "basic-tidb.tidb-cluster.svc.cluster.local"
    tidb_port: 4000
    tidb_user: "root"
    tidb_password: "GaianMobius"

    # Backup configuration
    base_backup_dir: "/root/tidb_backup"  # Local directory to store backups temporarily
    exclude_dbs: "INFORMATION_SCHEMA METRICS_SCHEMA mysql PERFORMANCE_SCHEMA test"  # Databases to exclude
    all_dbs: true  # Set to false if you want to back up specific databases
    db_list: "database1 database2 database3"  # Databases to backup (used if all_dbs is false)

    # Define the backup folder globally to be used in multiple tasks
    backup_folder: "{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}-railtel-tidb-backup"

  tasks:
    - name: Ensure backup directory exists locally
      file:
        path: "{{ base_backup_dir }}"
        state: directory

    - name: Ensure today's backup directory exists
      file:
        path: "{{ base_backup_dir }}/{{ backup_folder }}"
        state: directory

    - name: Fetch all databases from TiDB if all_dbs is true
      when: all_dbs
      shell: |
        mysql -u {{ tidb_user }} -p{{ tidb_password }} -P {{ tidb_port }} -h {{ tidb_host }} -e "SHOW DATABASES;" | tr -d "| " | grep -v Database
      register: db_list_result
      changed_when: false

    - name: Set db_list from the result if all_dbs is true
      set_fact:
        db_list: "{{ db_list_result.stdout_lines }}"
      when: all_dbs

    - name: Filter out excluded databases
      set_fact:
        databases_to_backup: "{{ db_list | difference(exclude_dbs.split()) }}"

    - name: Debug database list
      debug:
        msg: "Databases to backup: {{ databases_to_backup }}"

    - name: Backup each non-empty TiDB table in each database
      shell: |
        for table in $(mysql -u {{ tidb_user }} -p{{ tidb_password }} -P {{ tidb_port }} -h {{ tidb_host }} -e "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='{{ item }}' AND TABLE_ROWS > 0;" -s --skip-column-names); do
          echo "Backing up table $table in database {{ item }}";
          mysqldump -u {{ tidb_user }} -p{{ tidb_password }} -P {{ tidb_port }} -h {{ tidb_host }} {{ item }} $table > "{{ base_backup_dir }}/{{ backup_folder }}/{{ item }}_${table}.sql";
        done
      loop: "{{ databases_to_backup }}"
      loop_control:
        loop_var: item
      register: backup_db_status

    - name: Compress the backup directory
      shell: |
        tar -czvf "{{ base_backup_dir }}/{{ backup_folder }}.tar.gz" -C "{{ base_backup_dir }}" "{{ backup_folder }}"
      args:
        chdir: "{{ base_backup_dir }}"

    - name: Upload compressed backup to Azure Blob Storage
      shell: |
        azcopy copy "{{ base_backup_dir }}/{{ backup_folder }}.tar.gz" "{{ az_blob_url }}?{{ az_blob_token }}" --from-to LocalBlob

    - name: Remove uncompressed backup folder after upload
      file:
        path: "{{ base_backup_dir }}/{{ backup_folder }}"
        state: absent
      ignore_errors: yes

    - name: Remove compressed backup file after upload
      file:
        path: "{{ base_backup_dir }}/{{ backup_folder }}.tar.gz"
        state: absent
      ignore_errors: yes
